{extends file="base/body.tpl"}{block name=jquery}    {literal}                $("div.table-toolbar").html("Recorded Users").css({            "margin-left" : "26px",            "font-family": "'Poppins', sans-serif",            "font-size" : "1.2rem",            "font-weight" : 500,            "color": "#464646"        });                var countryCode = "{/literal}{PropertyService::getProperty('facility.country.code', 'lc')}{literal}";                $(function(){            $(".hotspot").tipTip({maxWidth: "400px", edgeOffset: 3, defaultPosition: "top", delay: 200, fadeOut: 400});               /*****************************             Select all options             ******************************/            $(".prm,.grp,.fac").click(function(){                var nm = $(this).attr('id');                if($(this).is(":checked")){                    $("div."+nm+"").find("input[type=checkbox]").each(function(){                        $(this).prop('checked',true);                    });                       if(nm == "prm"){$("div#err").html("");}                }else{                    $("div."+nm+"").find("input[type=checkbox]").each(function(){                        $(this).prop('checked',false);                    });                }            });        });                               /*****************************************         Interrupt form submit to make sure that          at least a permission or group selected        ******************************************/        $("#userForm").submit(function(e){            if( $('input[name="perm[]"]:checked').length == 0 && $('input[name="grp[]"]:checked').length  == 0){                e.preventDefault();                $("div#err").html("At least one permission or group must be selected");            }else{                $("div#err").html("");            }                        /*var countryCode = itiContact.getSelectedCountryData().iso2;            var telContact = phoneUtil.parseAndKeepRawInput(itiContact.getNumber(), countryCode.toUpperCase());            if (localCode.toUpperCase() === countryCode.toUpperCase()) {                $("input[name='contactNumber']").val(phoneUtil.format(telContact, i18n.phonenumbers.PhoneNumberFormat.NATIONAL));            } else {*/                $("input[name='contactNumber']").val(phoneUtil.format(telContact, i18n.phonenumbers.PhoneNumberFormat.INTERNATIONAL));            //}                    });                                $(function(){            capsLockWarning("#password, #cpassword", "{/literal}{Messages::i18n("warning.caps.lock")}{literal}");        });            {/literal}{/block}{block name=styles}    {literal}        .sectionHead{            font-weight: 400;            font-family: 'Poppins', sans-serif;            color:#506070;            font-size: 1.1rem;            font-variant: nornmal;            margin-bottom: 4px;        }                .block, .permBlock{            margin-left: 25px;        }        .permBlock{            margin-left: 5px;        }        .block li{            padding: 0px;        }                li > label {            color: #777 !important;        }            {/literal}{/block}{block name=dataTable}    {literal}        'iDisplayLength':100,        paging: true,        "dom": "<'row'<'large-4 medium-4 columns collapsed table-toolbar'><'large-7 medium-7 columns end small-text-left medium-text-right collapsed 'f>>"+            "t"+            "<'row'<'small-12 medium-6 columns'><'small-12 medium-6 columns'p>>",        'columnDefs': [            {              'targets': [3, 4, 5, 6, 7],              'orderable': false,            }        ]    {/literal}{/block}{block name=content}    {nocache}      {$msg}    <div class="listTableCaption_simpleTable" style="font-variant:normal;font-weight: 500;margin-top:2px;margin-bottom:2px;color:#414042;font-family:'Poppins', sans-serif;font-size:1.3rem;">        Manage Users    </div>    <div style="margin-left:15px;margin-top:2px;">        <form data-abide name="userForm" id="userForm" action="{$actionPage}" method="POST" autocomplete="off">                <input type="hidden" name="id" value="{$user->getId()}"/>        <div class="row" >            <div class="medium-6 large-4 columns">                <label><span class="required">Email <small class="error">invalid format</small></span>                   <input tabindex="1" type="email" name="email" id="email" value="{$user->getEmail()}" required autocomplete="off" placeholder=""/>                </label>            </div>            <div class="medium-6 large-4 end columns">                <label><span class="">Contact # <small class="error" id="phoneError"></small></span><br/>                    <input tabindex="2" type="text" class="medium" name="contact" id="contact" value="{$user->getContactNumber()}" data-abide-validator="phoneValidator"/>                </label>            </div>        </div>        <div class="row" >            <div class="medium-6 large-4 columns">                <label><span class="required">First name</span>                   <input tabindex="3" type="text" name="firstName" id="firstName" value="{$user->getFirstName()}" required />                </label>            </div>            <div class="medium-6 large-4 end columns">                <label><span class="required">Last name</span>                    <input tabindex="4" type="text" name="lastName" id="lastName" value="{$user->getLastName()}" required/>                </label>            </div>        </div>        <div class="row" >            <div class="medium-6 large-4 columns">                <label><span class="required">Password</span>                   <input tabindex="5" type="password" name="password" id="password" value="{$user->getPassword()}" autocomplete="off" required/>                </label>            </div>            <div class="medium-6 large-4 end columns">                <label><span class="required">Confirm password <small class="error">Must match password</small></span>                     <input tabindex="6" type="password" name="cpassword" id="cpassword" value="{$user->getPassword()}" autocomplete="off" required data-equalTo="password"/>                </label>            </div>        </div>        <div class="row" >            <div class="medium-6 large-4 end columns">                <label><span class="required">Timeout</span>                    <a href="#" class="hintanchorRow" onclick="return false;" onMouseover='showhint("The amount of time (in minutes) the user can remain idle before being logged out by the application.<br/>Valid values range from 10 to 60 minutes.", this, event, "180px")'>&nbsp;</a>                    <small class="error shortMedium">range: 10 to 60</small>                    <input tabindex="7" type="text" class="short" name="timeout" id="timeout" value="{if $user->isIdEmpty()} 20 {else}{$user->getTimeout()}{/if}" autocomplete="off" data-abide-validator='timeoutRange' required/>                 </label>            </div>            <div class="medium-3 large-2 end columns">                <label><span>Locked?</span>                    <div class="switch">                         <input name="locked" id="locked" type="checkbox" value="1" {if $user->isLocked()} checked {/if}>                         <label for="locked"></label>                     </div>                 </label>            </div>            <div class="medium-3 large-2 end columns">                {if $currentUser->isSystem()}                    <label><span>Superuser?</span>                        <div class="switch">                             <input name="isSystem" id="isSystem" type="checkbox" value="1" {if $user->isSystem()} checked {/if}>                             <label for="isSystem"></label>                         </div>                     </label>                {else}                    <input type="hidden" name="isSystem" value="{if $user->isSystem()} 1 {else} 0 {/if}"/>                {/if}            </div>        </div>        <div class="row">            <div class="medium-12 columns">              <hr width="100%" size="2" color="#D0E0F0" style="margin:0px;"/>            </div>        </div>        <div class="row">            <div class="medium-12 columns">                <span class="sectionHead">Groups</span>&nbsp<input type="checkbox" class="grp" id="grp"/>            </div>        </div>        <div class="grp">            <ul class="large-block-grid-3 medium-block-grid-2 small-block-grid-1 block">                {html_checkboxes separator='' name='grp[]' selected=$selectedGrps options=$groups assign='grpOpts'}                {foreach from=$grpOpts item=grpOpt}                    <li>{$grpOpt}</li>                {/foreach}            </ul>        </div>        <div class="row">            <div class="medium-12 columns">                <span class="sectionHead">Permissions</span>&nbsp;<input type="checkbox" class="prm" id="prm"/>            </div>        </div>        <div class="prm" >            {foreach from=$categories item=ctg}                {$perms=$prm->getByCategoryId($ctg->getId())}                {if $perms|count gt 0}                    <div class="row">                        <div class="medium-12 columns">                            <span class="permBlock">                                {Messages::i18n($ctg->getMessageResource())}                            </span>                        </div>                    </div>                    <ul class="large-block-grid-3 medium-block-grid-2 small-block-grid-1 block">                        {foreach from=$perms item=perm}                            <li>                                <label>                                    <input type="checkbox" name="perm[]" value="{$perm->getId()}" {if $perm->getId()|in_array:$selectedPerms} checked="checked" {/if}/>                                    {Messages::i18n($perm->getPermTextKey())}                                    {if $perm->getCommentKey() != ''}                                        <a href="#" class="hintanchorRow" onclick="return false;" onMouseover='showhint("{Messages::i18n($perm->getCommentKey())}", this, event, "180px")'>&nbsp;</a>                                    {/if}                                </label>                             </li>                        {/foreach}                    </ul>                {/if}            {/foreach}        </div>        <div class="row">            <div class="small-12 columns">              <hr width="100%" size="2" color="#D0E0F0" style="margin:0px;"/>            </div>        </div>        <div class="row">            <div class="medium-4 end columns">                <a tabindex="10" href="/security/user" class="reset">Reset</a>                {ElementTag::submitBtn(9)}            </div>            {if $user->getId() != ''}                <div class="medium-4 end columns">                    Confirm&nbsp;<input tabindex="11" id="confirmDelete" type="checkbox"/>&nbsp;                    {ElementTag::deleteBtn(12, "/security/user/delete/`$user->getId()`")}                </div>            {/if}        </div>         <div class="row">            <div class="medium-8 end columns">                <div id="err" class="error"></div>            </div>        </div>        </form>    </div>           {if $list|count gt 0}        <br/>         <table align="left" id="listTable" class="displayTable" width="98%" cellspacing="0">             <thead>                <tr height="30" style="">                    <th class="all" width="15%">Last Name</th>                     <th class="all" width="15%">First Name</th>                     <th class="all" width="15%">Email</th>                    <th class="all" width="15%">Contact #</th>                    <th class="tablet-l desktop" width="15%">Member Of</th>                    {if $currentUser->isSystem()}                        <th class="desktop" width="10%">Super user?</th>                    {/if}                    <th class="desktop" width="8%">Locked?</th>                    <th class="desktop" width="7%">&nbsp;</th>                </tr>            </thead>            <tbody>                {foreach from=$list item=usr}                     {$usrGrps=$userGroup->getGroupsByUserId($usr->getId())}                    <tr>                                                   <td>{$usr->getLastName()}</td>                        <td>{$usr->getFirstName()}</td>                        <td>{$usr->getEmail()}</td>                         <td>{$usr->displayContactNumber()}</td>                         <td>                            <span class="hotspot" title="{DbMapperUtility::objectArrayToNameList($usrGrps)}">                                {if $usrGrps|count == 1}                                     1 group                                {elseif $usrGrps|count > 0}                                    {$usrGrps|count} groups                                {else}                                    &nbsp;                                {/if}                            </span>                        </td>                        {if $currentUser->isSystem()}                            <td>{DbMapperUtility::booleanYesNo($usr->isSystem())}</td>                         {/if}                        <td>{DbMapperUtility::booleanYesNo($usr->getLocked())}</td>                        <td>                            <a class="editRow" title="{Messages::i18n('link.edit')}" href="/security/user/edit/{$usr->getId()}">                                <i class='fas fa-edit' style='font-size:1.5rem;color:#008cba;'></i>                            </a>                        </td>                    </tr>                {/foreach}            </tbody>        </table>     {else}        <div class="emptyListMessage">No non-patient users have been recorded.</div>    {/if}{/nocache}{/block}{block name="auxScripts"}    {literal}        const phoneUtil = i18n.phonenumbers.PhoneNumberUtil.getInstance();        var contact = document.querySelector("#contact");                var phoneErrorMap = ["Invalid number", "Invalid country code", "Too short", "Too long", "Invalid number"];                var itiContact = intlTelInput(contact,{            utilsScript: "/js/utils.js",            placeholderNumberType: "FIXED_LINE",            hiddenInput: "contactNumber",            "allowDropdown": true,            "autoPlaceholder": "polite",            "initialCountry": "ai",            "preferredCountries": ["ai", "ag", "vg", "dm", "gd", "gp", "mq", "ms", "kn", "lc", "vc"],            "formatOnDisplay": true,            autoHideDialCode: true,        });           {/literal}{/block}{block name="foundation"}    {literal}        abide: {            validators: {                phoneValidator: function (el, required, parent) {                                       if (el.getAttribute("id") == 'primaryNumber') {                        if (!itiPrimaryNumber.isValidNumber()) {                           /* var countryCode = itiPrimaryNumber.getSelectedCountryData().iso2;                            if (countryCode == "lc" && (itiPrimaryNumber.getNumber().indexOf("732") == 5 || itiPrimaryNumber.getNumber().indexOf("733") == 5) && phoneErrorMap[itiPrimaryNumber.getValidationError()] == "Invalid number") {                                $("#phoneError").text("");                                $("#primaryNumber").removeClass("error");                                return true;                            } */                            $("#phoneError").text(phoneErrorMap[itiPrimaryNumber.getValidationError()]).css("display","inline-block");                            $("#contact").addClass("error");                            return false;                        } else {                            $("#contact").removeClass("error");                        }                    }                    $("#phoneError").css("display","none");                    return true;                },                timeoutRange: function (el, required, parent) {                    try{                        if($.trim(el.value) != ''){                            var tout = $.trim(el.value);                                                       if(!isNaN(parseInt(tout)) && isFinite(tout)){                                if(parseInt(tout) >= 10 && parseInt(tout) <= 60){                                    return true;                                } else {                                    return false;                                }                            }else{                                 return false;                            }                        }else{                            return false;                        }                    }catch(e){                        return false;                    }                        //other rules can go here                    return true;                }            },            patterns: {                short_comment: /^.{0,30}$/,                long_comment: /^.{0,150}$/,                medium_comment: /^.{0,100}$/            }        }     {/literal}{/block}